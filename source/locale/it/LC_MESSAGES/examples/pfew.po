# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Romolo Marotta
# This file is distributed under the same license as the Sistemi Operativi
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sistemi Operativi \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-21 21:41+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../source/examples/pfew.rst:5
msgid "PThread implementation of FEW"
msgstr ""

#: ../source/examples/pfew.rst:41
msgid ""
"Pthread FEW (:raw-html:`<a class=\"external\" "
"href=\"https://github.com/SistemiOperativi/c_examples/blob/main/pfew/pfew.c\">PFEW</a>"
" <a class=\"fa fa-github external\" "
"href=\"https://github.com/SistemiOperativi/c_examples/blob/main/pfew/pfew.c\"></a>`)"
" è un semplice programma C per emulare il comportamento del programma "
":doc:`FEW <few>`, ma utilizzando i thread al posto di processi."
msgstr ""

#: ../source/examples/pfew.rst:46
msgid "Di conseguenza PFEW:"
msgstr ""

#: ../source/examples/pfew.rst:48
msgid "Creare un thread tramite :posix:`pthread_create <pthread_create>`."
msgstr ""

#: ../source/examples/pfew.rst:51
msgid ""
"A differenza della :posix:`fork <fork>`, la :posix:`pthread_create "
"<pthread_create>` richiede come terzo parametro la funzione che il thread"
" child deve eseguire. Tale funzione riceve un parametro che corrisponde "
"all'ultimo (quarto) paramentro di invocazione della "
":posix:`pthread_create <pthread_create>`. Il primo parametro invece è un "
"puntatore ad un'area di memoria dove il parent thread può accedere per "
"ottenere il :code:`pthread_t`, ossia il thread id, caratteristico del "
"thread child. Infine, il secondo parametro è un puntatore ad una "
"struttura dati di tipo :code:`pthread_attr_t`, opportunamente "
"inizializzata da un'invocazione a :posix:`pthread_attr_init "
"<pthread_attr_init>`, attraverso la quale è possibile configurare alcune "
"proprietà del thread child, tra cui:"
msgstr ""

#: ../source/examples/pfew.rst:61
msgid "dimensione minima e posizione dello stack per il thread child;"
msgstr ""

#: ../source/examples/pfew.rst:62
msgid "scheduling policy e priorità del thread child."
msgstr ""

#: ../source/examples/pfew.rst:66
msgid ""
"Attendere la terminazione del thread child tramite :posix:`pthread_join "
"<pthread_join>`."
msgstr ""

msgid "Osservazione"
msgstr ""

#: ../source/examples/pfew.rst:69
msgid ""
"A differenza di quanto accade per i processi con la funzione :posix:`wait"
" <wait>`, per i posix thread non esiste una funzione per aspettare un "
"generico thread child. La funzione :posix:`pthread_join <pthread_join>` "
"infatti richiede l'id del thread da attendere come primo paramentro. Il "
"secondo parametro invece è utilizzato per ricevere un payload generato "
"dal thread child atteso. Nel caso dei processi, un comportamento simile è"
" ottenibile grazie alla funzione :posix:`waitpid <waitpid>`."
msgstr ""

#: ../source/examples/pfew.rst:75
msgid "Il thread child termina con una :posix:`pthread_exit <pthread_exit>`."
msgstr ""

#: ../source/examples/pfew.rst:80
msgid "Riferimenti"
msgstr ""

#: ../source/examples/pfew.rst:82
msgid ":posix:`pthread_create <pthread_create>`"
msgstr ""

#: ../source/examples/pfew.rst:83
msgid ":posix:`pthread_attr_init <pthread_attr_init>`"
msgstr ""

#: ../source/examples/pfew.rst:84
msgid ":linux:`pthread_attr_init <pthread_attr_init>`"
msgstr ""

#: ../source/examples/pfew.rst:85
msgid ":posix:`pthread_join <pthread_join>`"
msgstr ""

#: ../source/examples/pfew.rst:86
msgid ":posix:`waitpid <waitpid>`"
msgstr ""

#: ../source/examples/pfew.rst:87
msgid ":posix:`pthread_exit <pthread_exit>`"
msgstr ""

#~ msgid "Esempi C"
#~ msgstr ""

#~ msgid "PFEW"
#~ msgstr ""

#~ msgid "PFEW è l'acronimo per Process-Fork-Exit-Wait"
#~ msgstr ""

#~ msgid "Process-Fork-Exit-Wait"
#~ msgstr ""

#~ msgid "PThread implementation of Fork-Exit-Wait program"
#~ msgstr ""

#~ msgid "Process-Fork-Exit-Wait (PFEW) è un semplice codice C per"
#~ msgstr ""

#~ msgid "Creare un thread tramite fork."
#~ msgstr ""

#~ msgid ":posix:`fork <fork>`."
#~ msgstr ""

#~ msgid ":posix:`exit <exit>`."
#~ msgstr ""

#~ msgid ":posix:`wait <wait>`."
#~ msgstr ""

#~ msgid "PThread implementation of FEW program"
#~ msgstr ""

#~ msgid "Creare un thread tramite * :posix:`pthread_create <pthread_create>`"
#~ msgstr ""

#~ msgid "Attendere la terminazione del processo appena creato tramite wait."
#~ msgstr ""

#~ msgid "Terminare il processo corrente utilizzanto exit."
#~ msgstr ""

#~ msgid "Creare un thread tramite :posix:`pthread_create <pthread_create>`."
#~ msgstr ""

#~ msgid ":posix:`exec <exec>`"
#~ msgstr ""

#~ msgid ""
#~ "1. Creare un thread tramite "
#~ ":posix:`pthread_create <pthread_create>`. .. "
#~ "observation_note::"
#~ msgstr ""

#~ msgid ""
#~ "Il main thread esegue la stampa di"
#~ " riga e successivamente invoca la "
#~ "fork per creare un processo child."
#~ msgstr ""

#~ msgid ""
#~ "Se la fork fallisce (:code:`res == "
#~ "-1`), il processo principale termina. "
#~ "Altrimenti, entrambi i processi eseguono "
#~ "a partire dalla terminazione della fork."
#~ msgstr ""

#~ msgid ""
#~ "Per differenziare il flusso di "
#~ "esecuzione tra il processo parent ed "
#~ "il processo child occorre analizzare il"
#~ " risultato della fork. Il processo "
#~ "child legge :code:`res == 0`, mentre "
#~ "il processo parent :code:`res != 0` "
#~ "(più precisamente :code:`res` contiene il "
#~ "pid del processo child). A questo "
#~ "punto il child esegue:"
#~ msgstr ""

#~ msgid ""
#~ "ossia va in stato di sleep per "
#~ "5 secondi, esegue una stampa e "
#~ "termina con codice di terminazione 1 "
#~ "invocando la syscall exit."
#~ msgstr ""

#~ msgid "Il parent esegue:"
#~ msgstr ""

#~ msgid ""
#~ "Nello specifico attende la terminazione "
#~ "di uno generico thread child tramite "
#~ "la system call wait. Grazie a "
#~ "questa chiamata, può inoltre ottenere il"
#~ " codice di terminazione dalla variabile "
#~ ":code:`status` grazie alla macro "
#~ ":code:`WEXITSTATUS` (il codice è memorizzato"
#~ " nel secondo byte di :code:`status`)."
#~ msgstr ""

#~ msgid "A differenza della :posix:`wait`"
#~ msgstr ""

#~ msgid "[:ref:`t3 <books>`] Sezione 1.2, 3.1"
#~ msgstr ""

