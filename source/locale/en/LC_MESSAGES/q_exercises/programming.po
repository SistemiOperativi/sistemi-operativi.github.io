# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Romolo Marotta
# This file is distributed under the same license as the Sistemi Operativi
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sistemi Operativi \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-17 15:05+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../source/q_exercises/programming.rst:2
msgid "8- Programmazione"
msgstr ""

#: ../source/q_exercises/programming.rst:4
msgid ""
"Nei sistemi operitvi UNIX, `/dev/urandom <https://man7.org/linux/man-"
"pages/man4/random.4.html>`_ è un dispositivo a caratteri (char device) "
"virtuale in grado di generare numeri casuali. Nello specifico, "
"l'operazione di lettura dal relativo file produce byte casuali. Scrivere "
"un programma C che genera un file con contenuto interamente randomico. Il"
" programma:"
msgstr ""

#: ../source/q_exercises/programming.rst:8
msgid ""
"prende come parametri da linea di comando: un numero *N* e una stringa "
"*S* da usare come nome del file da creare;"
msgstr ""

#: ../source/q_exercises/programming.rst:9
msgid "crea un file *S* contenente *N* byte randomici;"
msgstr ""

#: ../source/q_exercises/programming.rst:10
msgid ""
"utilizza il dispositivo /dev/random come sorgente di numeri pseudo-"
"casuali."
msgstr ""

#: ../source/q_exercises/programming.rst:12
msgid ""
"Dato un file binario contenente un sequenza di 2^15 interi di tipo "
"*short*, scrivere un programma che crea N processi o threads, i quali "
"leggono il contenuto del file ed individuano il valore minimo e massimo "
"contenuto nel file. Nel fornire una soluzione rispettare i seguenti "
"vincoli:"
msgstr ""

#: ../source/q_exercises/programming.rst:14
msgid "ciascun intero non può essere letto da più di un thread/processo;"
msgstr ""

#: ../source/q_exercises/programming.rst:15
msgid "ciascun thread/processo può leggere il medesimo intero al più una volta;"
msgstr ""

#: ../source/q_exercises/programming.rst:16
msgid ""
"ciascun thread/processo può allocare memoria nell'heap per al più 512 "
"byte;"
msgstr ""

#: ../source/q_exercises/programming.rst:17
msgid ""
"N è un parametro definito a tempo di compilazione o tramite linea di "
"comando;"
msgstr ""

#: ../source/q_exercises/programming.rst:18
msgid "N è minore o uguale a 8;"
msgstr ""

#: ../source/q_exercises/programming.rst:19
msgid ""
"è ammesso allocare di variabili globali (data) e locali (stack) per "
"memorizzare tipi primitivi (puntatori, int, short, char, long, etc.) per "
"al più 128 byte."
msgstr ""

#: ../source/q_exercises/programming.rst:21
msgid "Per generare il file è possibile utilizzare la soluzione dell'esercizio 1."
msgstr ""

#: ../source/q_exercises/programming.rst:23
msgid ""
"Scrivere un programma C *invert* che dato un file *A* ne inverte il "
"contenuto e lo memorizza in nuovo file *B*. Il programma deve:"
msgstr ""

#: ../source/q_exercises/programming.rst:25
msgid "riportare il contenuto di *A* in memoria;"
msgstr ""

#: ../source/q_exercises/programming.rst:26
msgid ""
"invertire la posizione di ciascun byte utilizzando un numero *N* di "
"thread/processi concorrenti;"
msgstr ""

#: ../source/q_exercises/programming.rst:27
msgid "scrivere il risultato in un nuovo file *B*."
msgstr ""

#: ../source/q_exercises/programming.rst:29
msgid ""
"*A*, *B* e *N* sono parametri che il programma deve acquisire da linea di"
" comando."
msgstr ""

#: ../source/q_exercises/programming.rst:31
msgid ""
"Si scriva il codice di una funzione C con la seguente interfaccia "
":code:`void tunnel(int descriptors[], int count)` tale che, se eseguita, "
"porti l'applicazione a gestire, per ogni file-descriptor dell'array "
"*descriptors* l'inoltro del flusso  dei dati in ingresso verso il canale "
"di standard-output dell'applicazione. Il parametro *count* indica di "
"quanti elementi e' costituito l'array *descriptors*. L'inoltro dovrà "
"essere attuato in modo concorrente per i diversi canali."
msgstr ""

#: ../source/q_exercises/programming.rst:32
msgid ""
"Si scriva una funzione C con la seguente interfaccia :code:`void "
"file_check(char *file_name, int num_threads)`. Tale funzione dovrà "
"lanciare num_thread nuovi threads, in modo che ciascuno di essi legga "
"stringhe dallo standard input, e per ogni stringa letta verifichi "
"l'occorrenza di tale stringa all'interno del file il cui path e' "
"identificato tramite il parametro file_name, e stampi la stringa su "
"standard output in caso affermativo."
msgstr ""

#~ msgid ""
#~ "Nei sistemi operitvi UNIX, `/dev/urandom "
#~ "<https://man7.org/linux/man-pages/man4/random.4.html>` è"
#~ " un dispositivo a caratteri (char "
#~ "device) virtuale in grado di generare"
#~ " numeri casuali. Nello specifico, "
#~ "l'operazione di lettura dal relativo "
#~ "file produce byte casuali. Scrivere un"
#~ " programma C che genera un file "
#~ "con contenuto interamente randomico. Il "
#~ "programma:"
#~ msgstr ""

#~ msgid ""
#~ "*A*, *B* e *N* sono parametri che"
#~ " il programma deve acquisiti da linea"
#~ " di comando."
#~ msgstr ""

#~ msgid ""
#~ "#. Scriva il codice di una "
#~ "funzione C con la seguente interfaccia"
#~ " :code:`void tunnel(int descriptors[], int "
#~ "count)` tale che, se eseguita, porti "
#~ "l'applicazione a gestire, per ogni "
#~ "file-descriptor dell'array *descriptors* "
#~ "l'inoltro del flusso  dei dati in "
#~ "ingresso verso il canale di standard-"
#~ "output dell'applicazione. Il parametro *count*"
#~ " indica di quanti elementi e' "
#~ "costituito l'array *descriptors*. L'inoltro "
#~ "dovrà essere attuato in modo concorrente"
#~ " per i diversi canali."
#~ msgstr ""

#~ msgid ""
#~ "#. Si scriva il codice di una "
#~ "funzione C con la seguente interfaccia"
#~ " :code:`void tunnel(int descriptors[], int "
#~ "count)` tale che, se eseguita, porti "
#~ "l'applicazione a gestire, per ogni "
#~ "file-descriptor dell'array *descriptors* "
#~ "l'inoltro del flusso  dei dati in "
#~ "ingresso verso il canale di standard-"
#~ "output dell'applicazione. Il parametro *count*"
#~ " indica di quanti elementi e' "
#~ "costituito l'array *descriptors*. L'inoltro "
#~ "dovrà essere attuato in modo concorrente"
#~ " per i diversi canali. #. Si "
#~ "scriva una funzione C con la "
#~ "seguente interfaccia :code:`void file_check(char "
#~ "*file_name, int num_threads)`. Tale funzione"
#~ " dovrà lanciare num_thread nuovi threads,"
#~ " in modo che ciascuno di essi "
#~ "legga stringhe dallo standard input, e"
#~ " per ogni stringa letta verifichi "
#~ "l'occorrenza di tale stringa all'interno "
#~ "del file il cui path e' "
#~ "identificato tramite il parametro file_name,"
#~ " e stampi la stringa su standard "
#~ "output in caso affermativo."
#~ msgstr ""

#~ msgid ""
#~ "Si scriva il codice di una "
#~ "funzione C con la seguente interfaccia"
#~ " :code:`void tunnel(int descriptors[], int "
#~ "count)` tale che, se eseguita, porti "
#~ "l'applicazione a gestire, per ogni "
#~ "file-descriptor dell'array *descriptors* "
#~ "l'inoltro del flusso  dei dati in "
#~ "ingresso verso il canale di standard-"
#~ "output dell'applicazione. Il parametro *count*"
#~ " indica di quanti elementi e' "
#~ "costituito l'array *descriptors*. L'inoltro "
#~ "dovrà essere attuato in modo concorrente"
#~ " per i diversi canali."
#~ msgstr ""

#~ msgid ""
#~ "Si scriva il codice di una "
#~ "funzione C con la seguente interfaccia"
#~ " :code:`void tunnel(int descriptors[], int "
#~ "count)` tale che, se eseguita, porti "
#~ "l'applicazione a gestire, per ogni "
#~ "file-descriptor dell'array *descriptors* "
#~ "l'inoltro del flusso  dei dati in "
#~ "ingresso verso il canale di standard-"
#~ "output dell'applicazione."
#~ msgstr ""

#~ msgid ""
#~ "Il parametro *count* indica di quanti"
#~ " elementi e' costituito l'array "
#~ "*descriptors*. L'inoltro dovrà essere attuato"
#~ " in modo concorrente per i diversi"
#~ " canali."
#~ msgstr ""

#~ msgid ""
#~ "Si scriva una funzione C con la"
#~ " seguente interfaccia :code:`void file_check(char"
#~ " *file_name, int num_threads)`. Tale "
#~ "funzione dovrà lanciare num_thread nuovi "
#~ "threads, in modo che ciascuno di "
#~ "essi legga stringhe dallo standard "
#~ "input, e per ogni stringa letta "
#~ "verifichi l'occorrenza di tale stringa "
#~ "all'interno del file il cui path "
#~ "e' identificato tramite il parametro "
#~ "file_name, e stampi la stringa su "
#~ "standard output in caso affermativo."
#~ msgstr ""

#~ msgid ""
#~ "4. Si scriva il codice di una "
#~ "funzione C con la seguente interfaccia"
#~ " :code:`void tunnel(int descriptors[], int "
#~ "count)` tale che, se eseguita, porti "
#~ "l'applicazione a gestire, per ogni "
#~ "file-descriptor dell'array *descriptors* "
#~ "l'inoltro del flusso  dei dati in "
#~ "ingresso verso il canale di standard-"
#~ "output dell'applicazione. Il parametro *count*"
#~ " indica di quanti elementi e' "
#~ "costituito l'array *descriptors*. L'inoltro "
#~ "dovrà essere attuato in modo concorrente"
#~ " per i diversi canali. #. Si "
#~ "scriva una funzione C con la "
#~ "seguente interfaccia :code:`void file_check(char "
#~ "*file_name, int num_threads)`. Tale funzione"
#~ " dovrà lanciare num_thread nuovi threads,"
#~ " in modo che ciascuno di essi "
#~ "legga stringhe dallo standard input, e"
#~ " per ogni stringa letta verifichi "
#~ "l'occorrenza di tale stringa all'interno "
#~ "del file il cui path e' "
#~ "identificato tramite il parametro file_name,"
#~ " e stampi la stringa su standard "
#~ "output in caso affermativo."
#~ msgstr ""

