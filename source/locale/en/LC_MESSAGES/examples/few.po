# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Romolo Marotta
# This file is distributed under the same license as the Sistemi Operativi
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Sistemi Operativi \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-21 23:15+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../source/examples/few.rst:5
msgid "FEW - Fork-Exit-Wait"
msgstr ""

#: ../source/examples/few.rst:34
msgid ""
"Fork-Exit-Wait (:raw-html:`<a class=\"external\" target=\"_blank\" "
"href=\"https://github.com/SistemiOperativi/c_examples/blob/main/few/few.c\">FEW</a>"
" <a class=\"fa fa-github external\" target=\"_blank\" "
"href=\"https://github.com/SistemiOperativi/c_examples/blob/main/few/few.c\"></a>`)"
" è un semplice programma C per:"
msgstr ""
"Fork-Exit-Wait (:raw-html:`<a class=\"external\" target=\"_blank\" "
"href=\"https://github.com/SistemiOperativi/c_examples/blob/main/few/few.c\">FEW</a>"
" <a class=\"fa fa-github external\" target=\"_blank\" "
"href=\"https://github.com/SistemiOperativi/c_examples/blob/main/few/few.c\"></a>`)"
" is a simple C program to:"

#: ../source/examples/few.rst:39
msgid "Creare un processo tramite :posix:`fork <fork>`."
msgstr "Create a process via  :posix:`fork <fork>`."

#: ../source/examples/few.rst:40
msgid ""
"Attendere la terminazione del processo appena creato tramite :posix:`wait"
" <wait>`."
msgstr "Wait the termination of the just created thread via :posix:`wait <wait>`."

#: ../source/examples/few.rst:41
msgid "Terminare il processo corrente utilizzando :posix:`exit <exit>`."
msgstr "Terminate a process execution via :posix:`exit <exit>`"

#: ../source/examples/few.rst:43
msgid ""
"Il main thread esegue la stampa di riga 8 e successivamente invoca la "
":posix:`fork <fork>` per creare un processo child."
msgstr ""
"The main thread prints at line 8 and then it calls :posix:`fork <fork>` "
"to create a child process."

#: ../source/examples/few.rst:51
msgid ""
"Se la :posix:`fork <fork>` fallisce (:code:`res == -1`), il processo "
"principale termina. Altrimenti, entrambi i processi eseguono a partire "
"dalla terminazione della :posix:`fork <fork>`."
msgstr ""
"If the :posix:`fork <fork>` fails (:code:`res == -1`), the main process "
"ends.Otherwise, both processes execute starting from the return of "
":posix:`fork <fork>`"

#: ../source/examples/few.rst:54
msgid ""
"Per differenziare il flusso di esecuzione tra il processo parent ed il "
"processo child occorre analizzare il risultato della :posix:`fork "
"<fork>`. Il processo child legge :code:`res == 0`, mentre il processo "
"parent :code:`res != 0` (più precisamente :code:`res` contiene il pid del"
" processo child). A questo punto il child esegue:"
msgstr ""
"In order to distinguish the parent from the child, it is mandatory to "
"analyze the result :posix:`fork <fork>`. The child proess will get "
":code:`res == 0`. Coversely, the parent process will obtain :code:`res !="
" 0`, namely :code:`res` maintains the process id (pid) of the child. At "
"this point, the child executes the following:"

#: ../source/examples/few.rst:67
msgid ""
"ossia va in stato di sleep per 5 secondi, esegue una stampa e termina con"
" codice di terminazione 1 invocando la syscall :posix:`exit <exit>`."
msgstr ""
"The child goes to sleep for 5 seconds and terminates with exit code equal"
" to 1 by invoking the syscall"

#: ../source/examples/few.rst:69
msgid "Il parent esegue:"
msgstr "The parent process executes:"

#: ../source/examples/few.rst:79
msgid ""
"Nello specifico attende la terminazione di uno generico thread child "
"tramite la system call :posix:`wait <wait>`. Grazie a questa chiamata, "
"può inoltre ottenere il codice di terminazione dalla variabile "
":code:`status` grazie alla macro :code:`WEXITSTATUS` (il codice è "
"memorizzato nel secondo byte di :code:`status`)."
msgstr ""
"In particular, it waits the termination of a generic child thread via "
":posix:`wait <wait>`. Thanks to this call, it can obtain the termination "
"code of the child from the variable :code:`status`.This cam be done "
"thanks to the macro :code:`WEXITSTATUS` (the exit code is stored in the "
"second byte of :code:`status`)."

#: ../source/examples/few.rst:85
msgid "Riferimenti"
msgstr "References"

#: ../source/examples/few.rst:87
msgid "[:ref:`t3 <books>`] Sezione 1.2, 3.1"
msgstr "[:ref:`t3 <books>`] Section 1.2, 3.1"

#: ../source/examples/few.rst:88
msgid ":posix:`fork <fork>`"
msgstr ""

#: ../source/examples/few.rst:89
msgid ":posix:`exit <exit>`"
msgstr ""

#: ../source/examples/few.rst:90
msgid ":posix:`wait <wait>`"
msgstr ""

