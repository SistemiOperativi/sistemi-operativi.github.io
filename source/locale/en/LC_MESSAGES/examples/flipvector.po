# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Romolo Marotta
# This file is distributed under the same license as the Sistemi Operativi
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Sistemi Operativi \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-03 01:41+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../source/examples/flipvector.rst:5
msgid "FlipVector"
msgstr ""

#: ../source/examples/flipvector.rst:8
msgid ""
":raw-html:`<a class=\"external\" target=\"_blank\" "
"href=\"https://github.com/SistemiOperativi/c_examples/blob/main/flip_vector/flip_vector.c\">FlipVector</a>"
" <a class=\"fa fa-github external\" target=\"_blank\" "
"href=\"https://github.com/SistemiOperativi/c_examples/blob/main/flip_vector/flip_vector.c\"></a>`"
" è un programma C il cui obiettivo è mostrare diversi aspetti "
"nell'utilizzo e gestione dei thread."
msgstr ""
":raw-html:`<a class=\"external\" target=\"_blank\" "
"href=\"https://github.com/SistemiOperativi/c_examples/blob/main/flip_vector/flip_vector.c\">FlipVector</a>"
" <a class=\"fa fa-github external\" target=\"_blank\" "
"href=\"https://github.com/SistemiOperativi/c_examples/blob/main/flip_vector/flip_vector.c\"></a>`"
" is a C program aimed to show several aspect of using and managing "
"threads."

#: ../source/examples/flipvector.rst:12
msgid ""
"In questo programma vengono creati molteplici thread che manipolano un "
"array condiviso. Nello specifico, ciascun thread inverte ripetutamente la"
" posizione di ciascuna entry nell'array, la cui dimensione è un numero "
"pari. A seguire, la funzione *stress_test* implementa tale operazione:"
msgstr ""
"This program creates multiple threads that access a shared array. Each "
"thread reverses the even-sized array multiple times. The *stress_test* "
"function implements such an operation:"

msgid "Domanda"
msgstr "Question"

#: ../source/examples/flipvector.rst:40
msgid ""
"Come è possibile modificare il ciclo interno per gestire array di taglia "
"generica?"
msgstr ""
"How can the inner cycle be modified to handle both odd and even sized "
"arrays?"

#: ../source/examples/flipvector.rst:43
msgid ""
"L'operatore :code:`^` implementa la semantica di eXclusive OR (`XOR "
"<https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#Bitwise-"
"Logical-Operators>`_) bit a bit. La relativa tabella di verità è la "
"seguente:"
msgstr ""
"The operator :code:`^` implements the bitwise eXclusive OR (`XOR "
"<https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#Bitwise-"
"Logical-Operators>`_). Its truth table is the following: "

#: ../source/examples/flipvector.rst:46
msgid "X"
msgstr ""

#: ../source/examples/flipvector.rst:46
msgid "Y"
msgstr ""

#: ../source/examples/flipvector.rst:46
msgid "X^Y"
msgstr ""

#: ../source/examples/flipvector.rst:48 ../source/examples/flipvector.rst:49
#: ../source/examples/flipvector.rst:50 ../source/examples/flipvector.rst:51
msgid "0"
msgstr ""

#: ../source/examples/flipvector.rst:49 ../source/examples/flipvector.rst:50
#: ../source/examples/flipvector.rst:51
msgid "1"
msgstr ""

#: ../source/examples/flipvector.rst:54
msgid ""
"In altre parole se i due bit di input sono uguali l'output è pari a 0. "
"Viceversa se sono diversi l'output è pari ad 1. Di conseguenza, "
":code:`x^x=0`."
msgstr ""
"In other words, if the two inputs are equal the output is 0. Conversely, "
"if they are different, the output is 1. It follows that :code:`x^x=0`."

#: ../source/examples/flipvector.rst:58
msgid ""
"Come è stato utilizzato lo XOR per implementare lo scambio del contenuto "
"di due variabili?"
msgstr "How was XOR used to implement the swap of two variables?"

#: ../source/examples/flipvector.rst:60
msgid ""
"Essendo l'array condiviso, la sincronizzazione è necessaria al fine di "
"manipolare correttamente l'array. Le funzioni :code:`acquire` e "
":code:`release` assolvono a questo scopo, utilizzando primitive di lock "
"nella loro implementazione."
msgstr ""
"The array is shared. Hence, synchronization is required to manipolate it "
"correctly. The functions :code:`acquire` and :code:`release` accomplish "
"this by resorting to locks."

#: ../source/examples/flipvector.rst:63
msgid ""
"Il programma misura le perfomance dell'applicazione in termini di sezioni"
" critiche eseguite. Per assicurarsi che ciascun thread lavori con la "
"massima concorrenza, questi aspettano che tutti i thread raggiungono la "
"medesima riga di codice, prima di cominciare a manipolare l'array. Questo"
" è ottenuto grazie alla primitiva di sincronizzazione "
":code:`pthread_barrier_wait`, che blocca un thread fintanto che *N* "
"thread non invocano la medesima funzione sul medesimo oggetto "
"inizializzato a *N*."
msgstr ""
"The program measures the perfomance by counting the total number of "
"critical sections executed by threads. To ensure that all threads work at"
" highest concurrency, they wait that each thread reaches the same code "
"line before starting to manipulate the array. This is acheived by using "
"the :code:`pthread_barrier_wait`, a synchronization primitive that blocks"
" until *N* threads wait on it. Clearly, *N* is an initialization "
"parameter of the barrier."

#: ../source/examples/flipvector.rst:70
msgid "Una barriera può esser vista come un particolare semaforo che:"
msgstr "A barrier can be described as a particular kind of semaphore such that:"

#: ../source/examples/flipvector.rst:72
msgid "può assumere valori negativi"
msgstr "it can assume negative values"

#: ../source/examples/flipvector.rst:73
msgid "inizializzato a -*N*"
msgstr "it is initialized with -*N*"

#: ../source/examples/flipvector.rst:75
msgid "l'operazione di wait incrementa il contatore di 1 unità"
msgstr "the wait operation increments the counter by 1 unit"

#: ../source/examples/flipvector.rst:75
msgid "se il semaforo è negativo il thread rimane bloccato in attesa"
msgstr "if the semaphore is negative the thread is blocked"

#: ../source/examples/flipvector.rst:76
msgid ""
"se il semaforo assume valore pari a 0, tutti i thread in attesa vengono "
"sbloccati e il valore resettato a -*N*"
msgstr ""
"when the semaphore value is equal to 0, all waiting threads will be "
"unblocked and value is reset to -*N*"

#: ../source/examples/flipvector.rst:78
msgid ""
"Prima di terminare ciascun thread utilizza una RMW per incrementare un "
"contatore globale :code:`ops` del numero di operazioni complessivamente "
"eseguite dai thread. A tal scopo si è utilizzata la funzione "
":code:`__sync_fetch_and_add`."
msgstr ""
"Before terminate each thread uses a RMW to increments a global counter "
":code:`ops` of the operations executed by all threads in the program. To "
"this goal the :code:`__sync_fetch_and_add` has been used."

#: ../source/examples/flipvector.rst:82
msgid ""
"Le operazioni builtin __sync di gcc sono semplici da utilizzare, ma "
"deprecate. La versione di riferimento è `__atomic builtin "
"<https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html"
"#g_t_005f_005fatomic-Builtins>`_, che tuttavia tengono conto anche del "
"modello di memoria secondo lo `standard C++11 "
"<https://en.cppreference.com/w/cpp/atomic/memory_order>`_. Per ulteriori "
"dettagli consultare `AtomicSync "
"<https://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync>`_."
msgstr ""
"The gcc builtin __sync are easy to use, but deprecated. The current "
"reference version are the `__atomic builtins "
"<https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html"
"#g_t_005f_005fatomic-Builtins>`_, that keep into account the memory model"
" according to the `standard C++11 "
"<https://en.cppreference.com/w/cpp/atomic/memory_order>`_. Read the "
"`AtomicSync <https://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync>`_ "
"documentation to further details."

#: ../source/examples/flipvector.rst:88
msgid ""
"Come è possibile implementare l'accumulo del numero di operazioni "
"globalmente eseguite senza utilizzare istruzioni RMW?"
msgstr ""
"How can the number of total operations by all threads be computed without"
" resorting to RMW instructions?"

#: ../source/examples/flipvector.rst:90
msgid ""
"Ciascun thread termina non appena la variabile :code:`stop` assume valore"
" pari a :code:`true`."
msgstr ""
"Each thread terminates as soon as the variable :code:`stop` becomes "
":code:`true`."

#: ../source/examples/flipvector.rst:92
msgid ""
"Il test viene ripetuto con molteplici configurazioni, ossia al variare "
"dei thread **e** del tipo di lock. Il tutto è coordinato dal main thread "
"secondo lo schema che segue."
msgstr ""
"The test will be repeated with several configurations with varying "
"threads **and** lock implementations. The main thread coordinates the "
"execution according to the following scheme."

msgid "Osservazione"
msgstr "Observation"

#: ../source/examples/flipvector.rst:115
msgid ""
"L'operatore :code:`<<` è l'operatore di `shift "
"<https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#Bit-"
"Shifting>`_ a sinistra. Considerando una variabile unsigned *x* a 8 bit "
"con valore 4 la sua rappresentazione binaria è 0000 0100. L'istruzione "
":code:`x << 1` indica l'operazione di shift a sinistra di una posizione "
"della variabile *x*, il cui risultato è pari a 0000 1000, ossia x assume "
"il valore 8. L'operatore :code:`>>` è l'operatore di shift a destra."
msgstr ""
"The operator :code:`<<` implements the left `shift "
"<https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#Bit-"
"Shifting>`_. Let *x* be an unsigned 8-bit variable initialized to 4, "
"whose binary representation is 0000 0100. The instruction :code:`x << 1` "
"is the left shift by one of *x*, whose result is 0000 1000. Thus, *x* is "
"equal to 8. :code:`>>` is the right shift operator."

#: ../source/examples/flipvector.rst:123
msgid ""
"Quali operazioni matematiche possono essere implementate tramite gli "
"operatori :code:`<<` e :code:`>>`?"
msgstr ""
"What are the mathematical operations that can be implemented by using "
":code:`<<` e :code:`>>`?"

#: ../source/examples/flipvector.rst:124
msgid ""
"Quante iterazioni esegue il seguente ciclo "
":code:`for(i=1;i<=MAX_THREADS;i<<=1)`?"
msgstr ""
"Given the following cycle \":code:`for(i=1;i<=MAX_THREADS;i<<=1)`, how "
"many iterations does it performs?"

#: ../source/examples/flipvector.rst:127
msgid "Per ciascun test, il main thread:"
msgstr "Foe each test, the main thread:"

#: ../source/examples/flipvector.rst:129
msgid "inizializza la barriera"
msgstr "initializes the barrier"

#: ../source/examples/flipvector.rst:130
msgid "crea i thread"
msgstr "creates the thread"

#: ../source/examples/flipvector.rst:131
msgid "va in sleep per :code:`SECONDS` secondi"
msgstr "it goes to sleep for :code:`SECONDS` seconds"

#: ../source/examples/flipvector.rst:132
msgid "setta la variabile :code:`stop` ad 1 con un'istruzione atomica"
msgstr "it sets the variable :code:`stop` to 1 with an atomic instruction"

#: ../source/examples/flipvector.rst:133
msgid "attende la terminazione di ciascun thread"
msgstr "waits the termination of each thread"

#: ../source/examples/flipvector.rst:134
msgid "distrugge la barriera"
msgstr "it destroys the barrier"

#: ../source/examples/flipvector.rst:136
msgid ""
"La variabile :code:`lock_type` è una variabile globale utilizzata "
"all'interno di :code:`acquire` e :code:`release` per selezionare "
"l'implementazione di lock da utilizzare."
msgstr ""
"The variable :code:`lock_type` is global and used by :code:`acquire` and "
":code:`release` for choosingthe lock implementation."

#: ../source/examples/flipvector.rst:139
msgid ""
"Perché la barriera viene distrutta ad ogni fine iterazione e "
"inizializzata ad inizio iterazione?"
msgstr ""
"Why is the barrier is initialized at the beginning and destroyed at the "
"end of each iteration?"

#: ../source/examples/flipvector.rst:140
msgid ""
"Quale altra istruzione RMW poteva essere usata al posto della "
"*compare&swap*?"
msgstr "What other RMW instruction can be used instead of *compare&swap*?"

#: ../source/examples/flipvector.rst:143
msgid ""
"Il test misura e stampa il numero di operazioni effettuate in concorrenza"
" da tutti i thread in un intervallo di tempo predefinito. Inoltre, prima "
"di eseguire il suddetto ciclo, il main thread:"
msgstr ""
"The test measures and prints the number of operations performed by each "
"thread in a given interval of time. Additionally, before executing the "
"abovementioned cycle, the main thread:"

#: ../source/examples/flipvector.rst:146
msgid "inizializza le primitive di lock della libreria pthread"
msgstr "initializes the pthread locks"

#: ../source/examples/flipvector.rst:153
msgid "limita i core su cui i thread possono andare in esecuzione"
msgstr "limits the core which threads can run on"

#: ../source/examples/flipvector.rst:164
msgid "sched_affinity è una funzione non POSIX"
msgstr "sched_affinity is not POSIX"

#: ../source/examples/flipvector.rst:167
msgid "Perché la set affinity viene utilizzata dal main thread?"
msgstr "Why is the affinity set up by the main thread?"

#: ../source/examples/flipvector.rst:168
msgid ""
"L'uso di set affinity garantisce che ciascun thread andrà in esecuzione "
"sul medesimo core? Se sì, perché? Se no, come è possibile garantirlo?"
msgstr ""
"Does the specified affinity ensures that each thread will run always on "
"the same core? if so, why? if not, how can you ensure that?"

#: ../source/examples/flipvector.rst:171
msgid "Le funzioni di acquire e release"
msgstr "The acquire and release functions"

#: ../source/examples/flipvector.rst:173
msgid ""
"Le funzioni di acquire e release utilizzano una specifica implementazione"
" di lock in funzione del valore assunto dalla variabile globale "
":code:`lock_type`. Nello specifico supportano 5 implementazioni "
"differenti di lock:"
msgstr ""
"The acquire and release function use a lock implementation according to "
"the value of :code:`lock_type`. In particular, they choose among 5 "
"possible implementations:"

#: ../source/examples/flipvector.rst:176
msgid "pthread spin lock (PT_TAS)"
msgstr ""

#: ../source/examples/flipvector.rst:177
msgid "pthread mutex (PT_MUTEX)"
msgstr ""

#: ../source/examples/flipvector.rst:178
msgid "test-and-set spin lock (TAS)"
msgstr ""

#: ../source/examples/flipvector.rst:179
msgid "test-and-test-and-set spin lock (TTAS)"
msgstr ""

#: ../source/examples/flipvector.rst:180
msgid "ticket spin lock (TICKET)"
msgstr ""

#: ../source/examples/flipvector.rst:182
msgid ""
"Nel caso di lock forniti dalla libreria pthread, acquire e release "
"ridirezionano sulle rispettive funzioni di libreria."
msgstr ""
"For the case of pthread locks, acquire an release invoke the appropriate "
"pthread functions."

#: ../source/examples/flipvector.rst:198
msgid "Chiaramente, le variabili *ptspin* e *ptmutex* sono variabili globali."
msgstr "Clearly, *ptspin* and *ptmutex* are global variable."

#: ../source/examples/flipvector.rst:200
msgid ""
"Anche i lock TAS e TTAS sono delle variabili globali intere. Il valore 0 "
"indica che il lock è libero e 1 indica che il lock è stato acquisito da "
"un qualche thread."
msgstr ""
"Both TAS and TTAS variables are global. 0 means that the lock is "
"available and 1 tells that the lock has been acquired by some thread."

#: ../source/examples/flipvector.rst:224
msgid ""
"la variabile *lock* è dichiarata **volatile**. Questo garantisce che il "
"compilatore non attuerà alcune ottimizzazioni, garantendo che ogni "
"accesso alla variabile *lock* verrà effettuato sempre in memoria. Ad "
"esempio, il compilatore non potrà usare i registri general purpose come "
"cache per la variabile."
msgstr ""
"*The variable *lock* has been defined as **volatile**. This guarantees "
"that the compiler does not apply several optimizations, ensuring that "
"each access to *lock* will be served by memory. For instance, the "
"compilar will not use general purpose registers to caching its value."

#: ../source/examples/flipvector.rst:225
msgid ""
":code:`asm volatile (\"\":::\"memory\");` costituisce una barriera per il"
" compilatore. Di conseguenza, quest'ultimo non può spostare istruzioni "
"che seguono la barriera prima di quest'ultima e viceversa. *asm* indica "
"al compilatore che si sta innestando all'interno di codice C del codice "
"assembly. In questo caso, l'istruzione innestata :code:`\"\"` è nulla. "
"Siccome, il codice innestato è nullo, è necessario indicare al "
"compilatore di non eliminare l'istruzione tramite il token **volatile**. "
"Infine, l'ultimo parametro :code:`\"memory\"` indica al compilatore che "
"l'istruzione accede in modo impredicibile alla memoria, disabilitando "
"ulteriori ottimizzazioni come il riordinamento delle operazioni di "
"scrittura/lettura. Per approfondimenti sul tema consultare la "
"documentazione di GCC riguardo gli `extended-asm "
"<https://gcc.gnu.org/onlinedocs/gcc-4.7.2/gcc/Extended-Asm.html>`_."
msgstr ""
":code:`asm volatile (\"\":::\"memory\");` builds a compiler barrier. "
"Consequently, the compiler cannot move instructions around the barrier.
"*asm* allows to inject assembly code within C. In this case, the injected instruction :code:`\"\"` is empty. "
"Consequently, we need to prevent the compiler from dropping it by using the **volatile** attribute. "
"Finally, the last paramenter :code:`\"memory\"` signal that the statement "
"touch the memory in an unpredictable manner, disabling optimizations like read/write reordering. "
"For additional details, checkout the gcc documentation on `extended-asm "
"<https://gcc.gnu.org/onlinedocs/gcc-4.7.2/gcc/Extended-Asm.html>`_."

#: ../source/examples/flipvector.rst:232
msgid ""
"Provare a dichiarare la variabile *lock* come **int** piuttosto che "
"**volatile int** e vederne gli effetti quando si compila con il massimo "
"livello di ottimizzazione (e.g. :code:`gcc -O3`)."
msgstr ""
"Try to declare *lock* as **int** instead of **volatile int** and check "
"the results while compiling with the highest optimization level (e.g. "
":code:`gcc -O3`)."

#: ../source/examples/flipvector.rst:234
msgid ""
"Infine, il ticket lock (TICKET) è implementato come una coppia di "
"variabili globali *lock* e *now* di tipo **volatile int**, che indicano "
"rispettivamente l'ultimo ticket servito e il ticket corrente."
msgstr ""
"Finally, the ticket lock (TICKET) has been implemented with a pair of "
"global **volatile int**, namely *lock* an *now*, that represent the last "
"served and the current ticket respectively. "

#: ../source/examples/flipvector.rst:258
msgid ""
"L'algoritmo di ticket lock mostrato è corretto? Se sì, cercare di "
"mostrare perché? Se no, mostrare un caso in cui l'algoritmo non "
"garantisce mutua eclusione o progresso."
msgstr ""
"Is the ticket lock implementation correct?If so, try to explain why. If "
"not, show a counter example. "

#: ../source/examples/flipvector.rst:262
msgid "Risultati"
msgstr "Results"

#: ../source/examples/flipvector.rst:264
msgid "In questa sezione vengono discussi i risultati ottenuti compilando con:"
msgstr "This section discussed the results obtained by compiling with:"

#: ../source/examples/flipvector.rst:266
msgid "MAX_THREADS = 32"
msgstr ""

#: ../source/examples/flipvector.rst:267
msgid "CORES = 4"
msgstr ""

#: ../source/examples/flipvector.rst:268
msgid "ARRAY_LEN = 256"
msgstr ""

#: ../source/examples/flipvector.rst:269
msgid "SECONDS = 5"
msgstr ""

#: ../source/examples/flipvector.rst:270
msgid "gcc -O3"
msgstr ""

#: ../source/examples/flipvector.rst:272
msgid "Il sistema è equipaggiato con:"
msgstr "The system was equipped with:"

#: ../source/examples/flipvector.rst:274
msgid "CPU = Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz"
msgstr ""

#: ../source/examples/flipvector.rst:275
msgid "CC = gcc 9.3.0"
msgstr ""

#: ../source/examples/flipvector.rst:276
msgid "LIBC = glibc 2.31"
msgstr ""

#: ../source/examples/flipvector.rst:277
msgid "LIBPTHREAD = NPTL 2.31"
msgstr ""

#: ../source/examples/flipvector.rst:279
msgid "A seguire i risultati."
msgstr "The results are shown in the following."

#: ../source/examples/flipvector.rst:283
msgid ""
"Le massime performance (numero di sezioni critiche eseguite) sono "
"raggiunte da tutti i lock in assenza di concorrenza. Quando il numero di "
"thread è maggiore di 1, le performance deteriorano a causa della contesa."
" Il degrado aumenta con thread count crescenti per gli spin lock (attesa "
"attiva). L'uso ridotto di RMW nei TTAS giustifica le differenze con TAS. "
"Il pthread mutex (PT-MUTEX) mantiene performance quasi inalterate in "
"quanto riduce la contesa sulle risorse hardware (thread in attesa fuori "
"dalla run queue). Non appena il numero di thread è maggiore del numero di"
" core usabili, il ticket lock (spin+FIFO) ha un drastico crollo delle "
"performance."
msgstr ""
"The highest performance (number of executed critical sections) are "
"achieved by all locks when there is no concurrency. When the number of "
"threads is higher than 1, the performance drops due to the effects of "
"contention on hardware resources. Increasing the number of threads makes "
"performance worse for all spin locks due totheir active wait. The less "
"frequent usage of RMW instruction by TTAS and PT_TTAS explains their "
"distance from TAS. The PT_MUTEX maintains an almost stable performance "
"thanks to its \"passive\" wait phase that make threads be out of the run "
"queue and do not compete for CPU cycles. As soon as the number of thread "
"is higher than the number of usable cores, the ticket lock (spin+FIFO) "
"has a performance collapse."

#: ../source/examples/flipvector.rst:291
msgid "Cosa giustifica il comportamento di TICKET?"
msgstr "How can you explain the TICKET behavior?"

#: ../source/examples/flipvector.rst:295
msgid "Riferimenti"
msgstr "References"

#: ../source/examples/flipvector.rst:297
msgid ":posix:`pthread_barrier_init <pthread_barrier_init>`"
msgstr ""

#: ../source/examples/flipvector.rst:298
msgid ":posix:`pthread_barrier_wait <pthread_barrier_wait>`"
msgstr ""

#: ../source/examples/flipvector.rst:299
msgid ""
"`bitwise XOR <https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html"
"#Bitwise-Logical-Operators>`_"
msgstr ""

#: ../source/examples/flipvector.rst:300
msgid ""
"`__sync gcc builtin <https://gcc.gnu.org/onlinedocs/gcc/_005f_005fsync-"
"Builtins.html>`_"
msgstr ""

#: ../source/examples/flipvector.rst:301
msgid ":posix:`pthread_spin_init <pthread_spin_init>`"
msgstr ""

#: ../source/examples/flipvector.rst:302
msgid ":posix:`pthread_mutex_init <pthread_mutex_init>`"
msgstr ""

#: ../source/examples/flipvector.rst:303
msgid ":linux2:`sched_setaffinity <sched_setaffinity>`"
msgstr ""

#: ../source/examples/flipvector.rst:304
msgid ":linux3:`CPU_SET <CPU_SET>`"
msgstr ""

#: ../source/examples/flipvector.rst:305
msgid ""
"`shift <https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#Bit-"
"Shifting>`_"
msgstr ""

#: ../source/examples/flipvector.rst:306
msgid ""
"`extended-asm <https://gcc.gnu.org/onlinedocs/gcc-4.7.2/gcc/Extended-"
"Asm.html>`_"
msgstr ""

